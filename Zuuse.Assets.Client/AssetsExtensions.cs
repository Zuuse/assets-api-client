// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zuuse.Assets.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Assets.
    /// </summary>
    public static partial class AssetsExtensions
    {
            /// <summary>
            /// Retrieve a single asset by Guid
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The asset Guid to retrieve.
            /// </param>
            public static Asset GetAsset(this IAssets operations, string client, string id)
            {
                return operations.GetAssetAsync(client, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a single asset by Guid
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The asset Guid to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Asset> GetAssetAsync(this IAssets operations, string client, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssetWithHttpMessagesAsync(client, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post a single asset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The Id of the asset
            /// </param>
            /// <param name='asset'>
            /// The Asset to insert/update. contained in the httppost body
            /// </param>
            public static string PostAsset(this IAssets operations, string client, string id, Asset asset)
            {
                return operations.PostAssetAsync(client, id, asset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a single asset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The Id of the asset
            /// </param>
            /// <param name='asset'>
            /// The Asset to insert/update. contained in the httppost body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PostAssetAsync(this IAssets operations, string client, string id, Asset asset, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAssetWithHttpMessagesAsync(client, id, asset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a single asset by Guid, will only return assets that are active in
            /// the hierarchy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The asset Guid to retrieve.
            /// </param>
            public static Asset GetActiveInHierarchyAssetById(this IAssets operations, string client, string id)
            {
                return operations.GetActiveInHierarchyAssetByIdAsync(client, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a single asset by Guid, will only return assets that are active in
            /// the hierarchy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The asset Guid to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Asset> GetActiveInHierarchyAssetByIdAsync(this IAssets operations, string client, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActiveInHierarchyAssetByIdWithHttpMessagesAsync(client, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the partial location/function asset tree from the asset itself to
            /// its top level location/function parent
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The asset Guid to retrieve.
            /// </param>
            /// <param name='taxonomyType'>
            /// The type of tree to build. Possible values include: 'Location', 'Function'
            /// </param>
            public static IList<AssetIdAndChildrenAssetReferences> GetParentsOfAsset(this IAssets operations, string client, string id, string taxonomyType)
            {
                return operations.GetParentsOfAssetAsync(client, id, taxonomyType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the partial location/function asset tree from the asset itself to
            /// its top level location/function parent
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The asset Guid to retrieve.
            /// </param>
            /// <param name='taxonomyType'>
            /// The type of tree to build. Possible values include: 'Location', 'Function'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AssetIdAndChildrenAssetReferences>> GetParentsOfAssetAsync(this IAssets operations, string client, string id, string taxonomyType, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetParentsOfAssetWithHttpMessagesAsync(client, id, taxonomyType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the partial assetlifecycle tree from the asset itself to its top
            /// level location/function parent
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The asset Guid to retrieve.
            /// </param>
            public static IList<AssetIdAndChildrenAssetReferences> GetLifecycleStateParentsOfAsset(this IAssets operations, string client, string id)
            {
                return operations.GetLifecycleStateParentsOfAssetAsync(client, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the partial assetlifecycle tree from the asset itself to its top
            /// level location/function parent
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The asset Guid to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AssetIdAndChildrenAssetReferences>> GetLifecycleStateParentsOfAssetAsync(this IAssets operations, string client, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLifecycleStateParentsOfAssetWithHttpMessagesAsync(client, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the count of all lifecycle settings grouped by method type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            public static IList<LifecycleSettingCountByMethod> GetCountsOfLifecycleSettings(this IAssets operations, string client)
            {
                return operations.GetCountsOfLifecycleSettingsAsync(client).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the count of all lifecycle settings grouped by method type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LifecycleSettingCountByMethod>> GetCountsOfLifecycleSettingsAsync(this IAssets operations, string client, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCountsOfLifecycleSettingsWithHttpMessagesAsync(client, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the hierarchial active state of the asset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static bool? GetInheritedIsActiveStateOfAsset(this IAssets operations, string client, string id)
            {
                return operations.GetInheritedIsActiveStateOfAssetAsync(client, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the hierarchial active state of the asset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> GetInheritedIsActiveStateOfAssetAsync(this IAssets operations, string client, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInheritedIsActiveStateOfAssetWithHttpMessagesAsync(client, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post a list of assets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account
            /// </param>
            /// <param name='assets'>
            /// List of assets to post, contained in the httppost body
            /// </param>
            public static IList<string> PostAssets(this IAssets operations, string client, IList<Asset> assets)
            {
                return operations.PostAssetsAsync(client, assets).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a list of assets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account
            /// </param>
            /// <param name='assets'>
            /// List of assets to post, contained in the httppost body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> PostAssetsAsync(this IAssets operations, string client, IList<Asset> assets, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAssetsWithHttpMessagesAsync(client, assets, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a summary of Asset Guids
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='ids'>
            /// Optionally supply the Asset IDs to get summaries for, space separated.
            /// </param>
            public static IList<SyncSummaryElement> GetAssetSummary(this IAssets operations, string client, string ids = default(string))
            {
                return operations.GetAssetSummaryAsync(client, ids).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a summary of Asset Guids
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='ids'>
            /// Optionally supply the Asset IDs to get summaries for, space separated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SyncSummaryElement>> GetAssetSummaryAsync(this IAssets operations, string client, string ids = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssetSummaryWithHttpMessagesAsync(client, ids, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a collection of assets by space separated Guids
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='terms'>
            /// Space separated Guids of assets ids
            /// </param>
            public static IList<Asset> SearchAssets(this IAssets operations, string client, string terms)
            {
                return operations.SearchAssetsAsync(client, terms).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a collection of assets by space separated Guids
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='terms'>
            /// Space separated Guids of assets ids
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Asset>> SearchAssetsAsync(this IAssets operations, string client, string terms, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchAssetsWithHttpMessagesAsync(client, terms, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the functional taxonomy for all assets, such as the Omniclass
            /// hierarchy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='depth'>
            /// Optionally prunes the functional taxonomy to only include the indicated
            /// levels.
            /// </param>
            /// <param name='inactive'>
            /// Optionally returns inactive assets as well as active ones
            /// </param>
            public static IList<TaxonomyLevelDescriptor> GetFunctionalTaxonomy(this IAssets operations, string client, int? depth = default(int?), bool? inactive = default(bool?))
            {
                return operations.GetFunctionalTaxonomyAsync(client, depth, inactive).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the functional taxonomy for all assets, such as the Omniclass
            /// hierarchy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='depth'>
            /// Optionally prunes the functional taxonomy to only include the indicated
            /// levels.
            /// </param>
            /// <param name='inactive'>
            /// Optionally returns inactive assets as well as active ones
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TaxonomyLevelDescriptor>> GetFunctionalTaxonomyAsync(this IAssets operations, string client, int? depth = default(int?), bool? inactive = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFunctionalTaxonomyWithHttpMessagesAsync(client, depth, inactive, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the functional taxonomy for all assets, such as the Omniclass
            /// hierarchy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='depth'>
            /// Optionally prunes the functional taxonomy to only include the indicated
            /// levels.
            /// </param>
            /// <param name='inactive'>
            /// Optionally returns inactive assets as well as active ones
            /// </param>
            public static IList<TaxonomyLevelDescriptor> GetLocationTaxonomy(this IAssets operations, string client, int? depth = default(int?), bool? inactive = default(bool?))
            {
                return operations.GetLocationTaxonomyAsync(client, depth, inactive).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the functional taxonomy for all assets, such as the Omniclass
            /// hierarchy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='depth'>
            /// Optionally prunes the functional taxonomy to only include the indicated
            /// levels.
            /// </param>
            /// <param name='inactive'>
            /// Optionally returns inactive assets as well as active ones
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TaxonomyLevelDescriptor>> GetLocationTaxonomyAsync(this IAssets operations, string client, int? depth = default(int?), bool? inactive = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLocationTaxonomyWithHttpMessagesAsync(client, depth, inactive, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the children for the supplied asset IDs, such as the Omniclass
            /// hierarchy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='assetIds'>
            /// Space separated Guids of assets ids
            /// </param>
            public static IList<TaxonomyLevelDescriptor> GetChildrenForAssets(this IAssets operations, string client, string assetIds)
            {
                return operations.GetChildrenForAssetsAsync(client, assetIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the children for the supplied asset IDs, such as the Omniclass
            /// hierarchy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='assetIds'>
            /// Space separated Guids of assets ids
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TaxonomyLevelDescriptor>> GetChildrenForAssetsAsync(this IAssets operations, string client, string assetIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChildrenForAssetsWithHttpMessagesAsync(client, assetIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the children for the supplied asset locations by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='layerIndex'>
            /// </param>
            /// <param name='layer0'>
            /// </param>
            /// <param name='layer1'>
            /// </param>
            /// <param name='layer2'>
            /// </param>
            /// <param name='layer3'>
            /// </param>
            /// <param name='layer4'>
            /// </param>
            /// <param name='layer5'>
            /// </param>
            /// <param name='layer6'>
            /// </param>
            /// <param name='layer7'>
            /// </param>
            /// <param name='layer8'>
            /// </param>
            /// <param name='layer9'>
            /// </param>
            public static IList<TaxonomyLevelDescriptor> SearchAssetLocationsByName(this IAssets operations, string client, int? layerIndex = default(int?), string layer0 = default(string), string layer1 = default(string), string layer2 = default(string), string layer3 = default(string), string layer4 = default(string), string layer5 = default(string), string layer6 = default(string), string layer7 = default(string), string layer8 = default(string), string layer9 = default(string))
            {
                return operations.SearchAssetLocationsByNameAsync(client, layerIndex, layer0, layer1, layer2, layer3, layer4, layer5, layer6, layer7, layer8, layer9).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the children for the supplied asset locations by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='layerIndex'>
            /// </param>
            /// <param name='layer0'>
            /// </param>
            /// <param name='layer1'>
            /// </param>
            /// <param name='layer2'>
            /// </param>
            /// <param name='layer3'>
            /// </param>
            /// <param name='layer4'>
            /// </param>
            /// <param name='layer5'>
            /// </param>
            /// <param name='layer6'>
            /// </param>
            /// <param name='layer7'>
            /// </param>
            /// <param name='layer8'>
            /// </param>
            /// <param name='layer9'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TaxonomyLevelDescriptor>> SearchAssetLocationsByNameAsync(this IAssets operations, string client, int? layerIndex = default(int?), string layer0 = default(string), string layer1 = default(string), string layer2 = default(string), string layer3 = default(string), string layer4 = default(string), string layer5 = default(string), string layer6 = default(string), string layer7 = default(string), string layer8 = default(string), string layer9 = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchAssetLocationsByNameWithHttpMessagesAsync(client, layerIndex, layer0, layer1, layer2, layer3, layer4, layer5, layer6, layer7, layer8, layer9, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the children for the supplied asset IDs, such as the Omniclass
            /// hierarchy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='layerIndex'>
            /// </param>
            /// <param name='layer0'>
            /// </param>
            /// <param name='layer1'>
            /// </param>
            /// <param name='layer2'>
            /// </param>
            /// <param name='layer3'>
            /// </param>
            /// <param name='layer4'>
            /// </param>
            /// <param name='layer5'>
            /// </param>
            /// <param name='layer6'>
            /// </param>
            /// <param name='layer7'>
            /// </param>
            /// <param name='layer8'>
            /// </param>
            /// <param name='layer9'>
            /// </param>
            public static IList<TaxonomyLevelDescriptor> SearchAssetFunctionsByName(this IAssets operations, string client, int? layerIndex = default(int?), string layer0 = default(string), string layer1 = default(string), string layer2 = default(string), string layer3 = default(string), string layer4 = default(string), string layer5 = default(string), string layer6 = default(string), string layer7 = default(string), string layer8 = default(string), string layer9 = default(string))
            {
                return operations.SearchAssetFunctionsByNameAsync(client, layerIndex, layer0, layer1, layer2, layer3, layer4, layer5, layer6, layer7, layer8, layer9).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the children for the supplied asset IDs, such as the Omniclass
            /// hierarchy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='layerIndex'>
            /// </param>
            /// <param name='layer0'>
            /// </param>
            /// <param name='layer1'>
            /// </param>
            /// <param name='layer2'>
            /// </param>
            /// <param name='layer3'>
            /// </param>
            /// <param name='layer4'>
            /// </param>
            /// <param name='layer5'>
            /// </param>
            /// <param name='layer6'>
            /// </param>
            /// <param name='layer7'>
            /// </param>
            /// <param name='layer8'>
            /// </param>
            /// <param name='layer9'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TaxonomyLevelDescriptor>> SearchAssetFunctionsByNameAsync(this IAssets operations, string client, int? layerIndex = default(int?), string layer0 = default(string), string layer1 = default(string), string layer2 = default(string), string layer3 = default(string), string layer4 = default(string), string layer5 = default(string), string layer6 = default(string), string layer7 = default(string), string layer8 = default(string), string layer9 = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchAssetFunctionsByNameWithHttpMessagesAsync(client, layerIndex, layer0, layer1, layer2, layer3, layer4, layer5, layer6, layer7, layer8, layer9, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all physical children for provided VirtualAssetID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='virtualAssetId'>
            /// Guid of the virtualAsset you want the children of
            /// </param>
            public static IList<string> GetAllPhysicalChildrenAssetIdsOfVirtualAsset(this IAssets operations, string client, string virtualAssetId)
            {
                return operations.GetAllPhysicalChildrenAssetIdsOfVirtualAssetAsync(client, virtualAssetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all physical children for provided VirtualAssetID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='virtualAssetId'>
            /// Guid of the virtualAsset you want the children of
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetAllPhysicalChildrenAssetIdsOfVirtualAssetAsync(this IAssets operations, string client, string virtualAssetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllPhysicalChildrenAssetIdsOfVirtualAssetWithHttpMessagesAsync(client, virtualAssetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all physical children for provided VirtualAssetID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='virtualAssetId'>
            /// Guid of the virtualAsset you want the children of
            /// </param>
            public static IList<string> GetAllPhysicalChildrenAssetsOfVirtualAsset(this IAssets operations, string client, string virtualAssetId)
            {
                return operations.GetAllPhysicalChildrenAssetsOfVirtualAssetAsync(client, virtualAssetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all physical children for provided VirtualAssetID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='virtualAssetId'>
            /// Guid of the virtualAsset you want the children of
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetAllPhysicalChildrenAssetsOfVirtualAssetAsync(this IAssets operations, string client, string virtualAssetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllPhysicalChildrenAssetsOfVirtualAssetWithHttpMessagesAsync(client, virtualAssetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the AssetLifecycleReference for the Children of provided asset, if
            /// Guid.Empty will get the functional Roots children
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            public static IList<AssetLifecycleReference> GetAssetLifecycleReferencesForChildren(this IAssets operations, string client, string assetId)
            {
                return operations.GetAssetLifecycleReferencesForChildrenAsync(client, assetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the AssetLifecycleReference for the Children of provided asset, if
            /// Guid.Empty will get the functional Roots children
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AssetLifecycleReference>> GetAssetLifecycleReferencesForChildrenAsync(this IAssets operations, string client, string assetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssetLifecycleReferencesForChildrenWithHttpMessagesAsync(client, assetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the AssetLifecycleStatistic of provided asset to provided state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='lifecycleState'>
            /// </param>
            public static void UpdateAssetLifecycleStatistics(this IAssets operations, string client, string assetId, int lifecycleState)
            {
                operations.UpdateAssetLifecycleStatisticsAsync(client, assetId, lifecycleState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the AssetLifecycleStatistic of provided asset to provided state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='lifecycleState'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAssetLifecycleStatisticsAsync(this IAssets operations, string client, string assetId, int lifecycleState, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateAssetLifecycleStatisticsWithHttpMessagesAsync(client, assetId, lifecycleState, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the asset template with configuration settings for an asset,
            /// including function and location taxonomy data as well as numeric and text
            /// attributes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            public static AssetTemplate GetAssetTemplate(this IAssets operations, string client)
            {
                return operations.GetAssetTemplateAsync(client).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the asset template with configuration settings for an asset,
            /// including function and location taxonomy data as well as numeric and text
            /// attributes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AssetTemplate> GetAssetTemplateAsync(this IAssets operations, string client, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssetTemplateWithHttpMessagesAsync(client, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Saves or updates an asset template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account
            /// </param>
            /// <param name='template'>
            /// The template object to be persisted
            /// </param>
            public static AssetTemplate PostAssetTemplate(this IAssets operations, string client, AssetTemplate template)
            {
                return operations.PostAssetTemplateAsync(client, template).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Saves or updates an asset template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account
            /// </param>
            /// <param name='template'>
            /// The template object to be persisted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AssetTemplate> PostAssetTemplateAsync(this IAssets operations, string client, AssetTemplate template, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAssetTemplateWithHttpMessagesAsync(client, template, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the root asset for the list of assets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='assetIds'>
            /// Space separated Guids of assets ids
            /// </param>
            public static Asset GetRootAssetForIds(this IAssets operations, string client, string assetIds)
            {
                return operations.GetRootAssetForIdsAsync(client, assetIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the root asset for the list of assets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='assetIds'>
            /// Space separated Guids of assets ids
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Asset> GetRootAssetForIdsAsync(this IAssets operations, string client, string assetIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRootAssetForIdsWithHttpMessagesAsync(client, assetIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of Asset counts using parent asset Id's
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='assetIds'>
            /// Space separated Guids of assets ids
            /// </param>
            public static IList<PhysicalAssetCountForTaxonomy> GetPhysicalAssetCountForIds(this IAssets operations, string client, string assetIds)
            {
                return operations.GetPhysicalAssetCountForIdsAsync(client, assetIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of Asset counts using parent asset Id's
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='assetIds'>
            /// Space separated Guids of assets ids
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PhysicalAssetCountForTaxonomy>> GetPhysicalAssetCountForIdsAsync(this IAssets operations, string client, string assetIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPhysicalAssetCountForIdsWithHttpMessagesAsync(client, assetIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
