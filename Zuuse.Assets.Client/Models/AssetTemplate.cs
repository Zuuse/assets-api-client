// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zuuse.Assets.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class AssetTemplate
    {
        /// <summary>
        /// Initializes a new instance of the AssetTemplate class.
        /// </summary>
        public AssetTemplate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AssetTemplate class.
        /// </summary>
        public AssetTemplate(string id = default(string), int? maximumLevels = default(int?), IList<AssetTaxonomyInfo> locations = default(IList<AssetTaxonomyInfo>), IList<AssetTaxonomyInfo> functions = default(IList<AssetTaxonomyInfo>), IList<AssetAttributeInfo> attributes = default(IList<AssetAttributeInfo>), IList<AssetMeasureInfo> measures = default(IList<AssetMeasureInfo>), System.DateTime? versionDate = default(System.DateTime?), string versionBy = default(string), System.DateTime? createdDate = default(System.DateTime?), string createdBy = default(string), bool? isActive = default(bool?))
        {
            Id = id;
            MaximumLevels = maximumLevels;
            Locations = locations;
            Functions = functions;
            Attributes = attributes;
            Measures = measures;
            VersionDate = versionDate;
            VersionBy = versionBy;
            CreatedDate = createdDate;
            CreatedBy = createdBy;
            IsActive = isActive;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaximumLevels")]
        public int? MaximumLevels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Locations")]
        public IList<AssetTaxonomyInfo> Locations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Functions")]
        public IList<AssetTaxonomyInfo> Functions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Attributes")]
        public IList<AssetAttributeInfo> Attributes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Measures")]
        public IList<AssetMeasureInfo> Measures { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "VersionDate")]
        public System.DateTime? VersionDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "VersionBy")]
        public string VersionBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatedDate")]
        public System.DateTime? CreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatedBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsActive")]
        public bool? IsActive { get; set; }

    }
}
